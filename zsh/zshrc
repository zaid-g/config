# %% ---------- [vi mode] ----------:

bindkey -v
export KEYTIMEOUT=1

# %% ---------- [colors and prompt] ----------:

autoload -U colors && colors
PS1=" %{$fg[green]%}%~%{$fg[green]%} %{$reset_color%}$%b "
zle_highlight=('region:bg=168,fg=251')
zle_highlight=('paste:bg=168,fg=251', 'region:bg=168,fg=251')

# %% ---------- [auto-completion] ----------:

autoload -U compinit
zmodload zsh/complist
compinit
_comp_options+=(globdots)              # Include hidden files.
zstyle ':completion:*' menu select
bindkey -M menuselect '^[[Z' reverse-menu-complete

# 0 -- vanilla completion (abc => abc)
# 1 -- smart case completion (abc => Abc)
# 2 -- word flex completion (abc => A-big-Car)
# 3 -- full flex completion (abc => ABraCadabra)
zstyle ':completion:*' matcher-list '' \
  'm:{a-z\-}={A-Z\_}' \
  'r:[^[:alpha:]]||[[:alpha:]]=** r:|=* m:{a-z\-}={A-Z\_}' \
  'r:|?=** m:{a-z\-}={A-Z\_}'


# %% -------- [vim] ----------:


export NEOVIM_EDITOR=~/app/neovim/squashfs-root/AppRun
# vim, VM taken
alias V='$NEOVIM_EDITOR'
function VP(){
    patterns=()
    for i in "$@"; do
        patterns+=(**/*.$i)
    done
    $NEOVIM_EDITOR ${patterns[@]}
}
function VS(){
    git_branch=$(git branch --show-current)
    $NEOVIM_EDITOR -S .vim/$git_branch.vim
}
alias VC='$NEOVIM_EDITOR -S ~/doc/projects/config/vim/VC_session.vim'
alias VZ='$NEOVIM_EDITOR ~/.zshrc'

# %% -------- [grep] ----------:

export GNU_GREP=$(which grep)
function GREP(){
    if [ "$#" -eq 1 ]; then
        $GNU_GREP -rni --exclude-dir='.*' -e $1
    else
        $GNU_GREP -rni --exclude-dir='.*' --include="*.$1" -e $2
    fi
}

# %% -------- [find] ----------:

export GNU_FIND=$(which find)
function FIND(){
    $GNU_FIND . -not -path '*/.*' -iname "*${@}*"
}

# %% -------- [cd] ----------:

function cd() {
    builtin cd $1
    current_working_directory_leaf="$(basename $(pwd))"
    if [[ -d ~/.virtualenvs/.$current_working_directory_leaf ]] ; then
        if [[ -z "$VIRTUAL_ENV" ]] ; then
            . ~/.virtualenvs/.$current_working_directory_leaf/bin/activate
        fi
            deactivate
            . ~/.virtualenvs/.$current_working_directory_leaf/bin/activate
    fi
}

alias CDC="cd ~/doc/projects/config"
alias CDP="cd ~/doc/projects"
alias CDD="cd ~/Downloads"
alias CDM="cd ~/misc"

# %% -------- [mv] ----------:

alias mv="mv -v"

function MV(){
    latest_download=~/Downloads/$(ls -Art ~/Downloads | tail -n 1)
    current_working_directory=$(pwd)
    if [ "$#" -eq 0 ]; then
        mv $latest_download .
    else
        latest_download_file_name=$(basename ${latest_download})
        mv $latest_download ${1}_$latest_download_file_name
    fi
}


# %% -------- [config] ----------:

alias AC="bash ~/doc/projects/config/apply_config.sh"
alias FAAC="bash ~/doc/projects/config/fetch_and_apply_config.sh"


# %% -------- [ls] ----------:

alias ls="ls --color=auto"
alias LL="ls -lt --color=auto"
alias LA="ls -A --color=auto"


# %% -------- [python] ----------:

alias I="python3 -m IPython"
alias P="python3"
alias PT="python3 -m pytest -sxvv"
alias PTDB="pytest -sxvv --pdb"
alias BLACK="python3 -m black **/*.py"
alias PC="pre-commit run -a"

function PIP3(){
    pip3 install wheel
    pip3 install ipdb==0.13.11
    pip3 install ipython==7.31.1
    pip3 install neovim
    pip3 install pandas
    pip3 install black
}

function PVENV(){
    current_working_directory=$(pwd)
    project_name="$(basename $(pwd))"
    deactivate
    if [ -d ~/.virtualenvs/.$project_name ]; then
        rm -rf ~/.virtualenvs/.$project_name
    fi
    mkdir -p .vim
    mkdir -p ~/.virtualenvs
    builtin cd ~/.virtualenvs
    if [ "$#" -eq 0 ]; then
        python3 -m venv ".$project_name"
    else
        $1 -m venv ".$project_name"
    fi
    . ./".$project_name"/bin/activate
    builtin cd $current_working_directory
    touch requirements.txt
    touch Dockerfile
    if ! [ -e .git ]; then
        git init
        wget https://raw.githubusercontent.com/github/gitignore/main/Python.gitignore
        wget https://raw.githubusercontent.com/pre-commit/pre-commit/main/.pre-commit-config.yaml
        mv Python.gitignore .gitignore
        echo "\n# vim\n.vim\n.ccls*" >> .gitignore
    fi;
    PIP3 # keep at end
}


# %% -------- [tmux] ----------:

alias T="tmux -2"
alias TLS="tmux ls"
alias TAS="tmux attach-session -t"
alias TKS="tmux kill-session -t"
alias TKAS="tmux kill-server"

function TS(){
# Set Session Name
SESSION="0"
SESSIONEXISTS=$(tmux list-sessions | grep $SESSION)
# Only create tmux session if it doesn't already exist
if [ "$SESSIONEXISTS" = "" ]
then
    # Start New Session with our name
    tmux new-session -d -s $SESSION
    # misc
    tmux rename-window -t 0 'misc'
    tmux send-keys -t 'misc' 'VC' C-m
    #
    tmux new-window -t $SESSION:1 -n 'projects'
    tmux send-keys -t 'projects' 'cd ~/doc/projects' C-m
fi
# Attach Session, on the Main window
tmux attach-session -t $SESSION:0
}

# %% -------- [git] ----------:

alias G="git"
alias GS="git status"
alias GD="git diff"
alias GA="git add"
alias GC="git commit"
alias GCM="git commit -m"
alias GCH="git checkout"
alias GM="git merge"
alias GF="git fetch"
alias GL="git log --graph --decorate --oneline"
alias GFO="git fetch origin"
alias GB="git branch --sort=-committerdate"
alias GPUSH="git push -u origin HEAD"
alias GPULL='git pull origin $(git rev-parse --abbrev-ref HEAD)'


# %% -------- [docker] ----------:

function DOCK(){
    sudo docker run -it -v $HOME/doc/projects/config:/home/ubuntu/doc/projects/config $@ main
}
function DOCKCWD(){
    sudo docker run -it -v $(pwd):$(pwd) -v $HOME/doc/projects/config:/home/ubuntu/doc/projects/config -w $(pwd) $@ main
}
alias D="docker"
alias DB="docker build"
alias DR="docker run"
alias DC="docker container"
alias DCE="docker container exec"
alias DI="docker image"


# %% -------- [others] ----------:

alias S="sudo"
alias C="clear"
alias RS="source ~/.zshrc && cd ."
alias VM="virt-manager"
alias PO="systemctl poweroff"
# xdg open (open file from terminal with default app)
alias X="xdg-open"
alias DISCORD="snap run discord"
alias FF="firefox"
function GRIM(){
    if [ "$#" -eq 1 ]; then
        grim -g "$(slurp)" ~/Downloads/screenshot-"$1"-"$(date +'%Y-%m-%dT%H:%M:%S').png"
    else
        grim -g "$(slurp)" ~/Downloads/screenshot"$(date +'%Y-%m-%dT%H:%M:%S').png"
    fi
}

# %% ---------- [syntax highlighting] ----------:

# should be last.
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh 2>/dev/null
