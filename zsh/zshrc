#

# %% ---------- [vi mode] ----------:

bindkey -v
export KEYTIMEOUT=1


#  %% -------- [bindings] ----------:

# Bind Ctrl-space to clear-screen
bindkey '^@' clear-screen

# %% ---------- [colors and prompt] ----------:

autoload -U colors && colors
PS1=" %{$fg[green]%}%~%{$fg[green]%} %{$reset_color%}$%b "
zle_highlight=('region:bg=168,fg=251')
zle_highlight=('paste:bg=168,fg=251', 'region:bg=168,fg=251')

# %% ---------- [auto-completion] ----------:

autoload -U compinit
zmodload zsh/complist
compinit
_comp_options+=(globdots)              # Include hidden files.
zstyle ':completion:*' menu select
bindkey -M menuselect '^[[Z' reverse-menu-complete

# 0 -- vanilla completion (abc => abc)
# 1 -- smart case completion (abc => Abc)
# 2 -- word flex completion (abc => A-big-Car)
# 3 -- full flex completion (abc => ABraCadabra)
zstyle ':completion:*' matcher-list '' \
  'm:{a-z\-}={A-Z\_}' \
  'r:[^[:alpha:]]||[[:alpha:]]=** r:|=* m:{a-z\-}={A-Z\_}' \
  'r:|?=** m:{a-z\-}={A-Z\_}'


# %% -------- [vim] ----------:


export NEOVIM_EDITOR=~/app/neovim/squashfs-root/AppRun
# vim, VM taken
alias V='$NEOVIM_EDITOR'
VP() {
    local files
    if [ "$#" -eq 0 ]; then
        files=($(get_allowed_files_matching_types))  # All allowed files
    else
        files=($(get_allowed_files_matching_types "$@"))  # Filtered by extensions
    fi
    if (( ${#files[@]} )); then
        $NEOVIM_EDITOR "${files[@]}"
    else
        echo "No matching files found outside forbidden folders."
    fi
}
VS(){
    git_branch=$(git branch --show-current)
    $NEOVIM_EDITOR -S .vim/$git_branch.vim
}
alias VCHEAT='$NEOVIM_EDITOR ~/doc/cheatsheet.md'
alias VSCRATCH='$NEOVIM_EDITOR ~/doc/scratch.md'
alias VZ='$NEOVIM_EDITOR ~/.zshrc'

# %% -------- [grep] ----------:

export GNU_GREP=$(which grep)
GREP() {
    local pattern
    local files

    if [ "$#" -eq 1 ]; then
        pattern="$1"
        files=$(get_allowed_files_matching_types)
    else
        pattern="${@: -1}"
        local exts=("${@:1:$#-1}")
        files=$(get_allowed_files_matching_types "${exts[@]}")
    fi

    [ -z "$files" ] && return

    while IFS= read -r file; do
        "$GNU_GREP" -Hni -e "$pattern" "$file"
    done <<< "$files"
}


# %% -------- [find] ----------:

export GNU_FIND=$(which find)
FORBIDDEN_FOLDER_PATTERNS=("node_modules" "build" ".*")

get_all_allowed_files() {
    local forbidden=("${FORBIDDEN_FOLDER_PATTERNS[@]}")
    local find_cmd=(find .)
    for pattern in "${forbidden[@]}"; do
        find_cmd+=(-path "*/$pattern" -prune -o)
    done
    find_cmd+=(-type f -print)
    "${find_cmd[@]}"
}
# Function to find files matching given extensions
get_allowed_files_matching_types() {
  local extensions=("$@")
  local files
  files=$(get_all_allowed_files)
  # If extensions are given, filter by them (case-insensitive)
  if [ "${#extensions[@]}" -gt 0 ]; then
    local pattern
    pattern=$(IFS=\|; echo "${extensions[*]}" | sed 's/ /|/gI')
    echo "$files" | grep -Eiq "\.(${pattern})$" && echo "$files" | grep -Ei "\.(${pattern})$" | sort || return
  else
    echo "$files" | sort
  fi
}
# Function to find files matching a general pattern
get_files_matching_pattern() {
  local pattern="$1"
  local files
  files=$(get_all_allowed_files)
  # If a pattern is given, filter by it (case-insensitive)
  if [ -n "$pattern" ]; then
    echo "$files" | grep -Eiq "$pattern" && echo "$files" | grep -Ei "$pattern" | sort || return
  else
    echo "$files" | sort
  fi
}
# Shorthand functions
FINDT() {
    get_allowed_files_matching_types "$@"
}
FIND() {
    get_files_matching_pattern "$@"
}



# %% -------- [cd] ----------:

cd() {
    builtin cd $1
    current_working_directory_leaf="$(basename $(pwd))"
    if [[ -d ~/.virtualenvs/.$current_working_directory_leaf ]] ; then
        if [[ -z "$VIRTUAL_ENV" ]] ; then
            . ~/.virtualenvs/.$current_working_directory_leaf/bin/activate
        fi
            deactivate
            . ~/.virtualenvs/.$current_working_directory_leaf/bin/activate
    fi
}

alias CDC="cd ~/doc/config"
alias CDA="cd ~/doc"
alias CDD="cd ~/Downloads"
alias CD="cd ~/doc"
alias CDT="cd ~/trash"

# %% -------- [mv] ----------:

alias mv="mv -v"

MV(){
    latest_download=~/Downloads/$(ls -Art ~/Downloads | tail -n 1)
    current_working_directory=$(pwd)
    if [ "$#" -eq 0 ]; then
        mv $latest_download .
    else
        latest_download_file_name=$(basename ${latest_download})
        mv $latest_download ${1}_$latest_download_file_name
    fi
}


# %% -------- [config] ----------:

alias AC="bash ~/doc/config/apply_config.sh"
alias FAAC="bash ~/doc/config/fetch_and_apply_config.sh"


# %% -------- [ls] ----------:

alias ls="ls --color=auto"
alias LL="ls -lt --color=auto"
alias LLR="ls -ltr --color=auto"
alias LLALL="ls -lA --color=auto"
alias LLA="ls -l --color=auto"


# %% -------- [python] ----------:

alias I="python3 -m IPython"
alias P="python3"
alias PT="python3 -m pytest -sxvv"
alias PTDB="pytest -sxvv --pdb"
alias BLACK="python3 -m black **/*.py"
alias PC="pre-commit run -a"

PIP3(){
    pip3 install wheel
    pip3 install ipdb==0.13.11
    pip3 install ipython==7.31.1
    pip3 install neovim
    pip3 install pandas
    pip3 install black
}

PVENV(){
    current_working_directory=$(pwd)
    project_name="$(basename $(pwd))"
    deactivate
    if [ -d ~/.virtualenvs/.$project_name ]; then
        rm -rf ~/.virtualenvs/.$project_name
    fi
    mkdir -p .vim
    mkdir -p ~/.virtualenvs
    builtin cd ~/.virtualenvs
    if [ "$#" -eq 0 ]; then
        python3 -m venv ".$project_name"
    else
        $1 -m venv ".$project_name"
    fi
    . ./".$project_name"/bin/activate
    builtin cd $current_working_directory
    touch requirements.txt
    touch Dockerfile
    if ! [ -e .git ]; then
        git init
        wget https://raw.githubusercontent.com/github/gitignore/main/Python.gitignore
        wget https://raw.githubusercontent.com/pre-commit/pre-commit/main/.pre-commit-config.yaml
        mv Python.gitignore .gitignore
        echo "\n# vim\n.vim\n.ccls*" >> .gitignore
    fi;
    PIP3 # keep at end
}


# %% -------- [tmux] ----------:

alias T="tmux -2"
alias TLS="tmux ls"
alias TAS="tmux attach-session -t"
alias TKS="tmux kill-session -t"
alias TKAS="tmux kill-server"

TS() {
    tmux new-session -d -s temp
    SESSION=$(tmux display-message -p '#S')

    # "doc" (horizontal split)
    tmux rename-window -t $SESSION:0 'doc'
    tmux split-window -h -t $SESSION:0
    tmux send-keys -t $SESSION:0.0 'CD' C-m
    tmux send-keys -t $SESSION:0.1 'VCHEAT' C-m

    # "config" (horizontal split)
    tmux new-window -t $SESSION: -n 'scratch'
    tmux split-window -h -t $SESSION:1
    tmux send-keys -t $SESSION:1.0 'CDT' C-m
    tmux send-keys -t $SESSION:1.1 'VSCRATCH' C-m

    # "config" (horizontal split)
    tmux new-window -t $SESSION: -n 'config'
    tmux split-window -h -t $SESSION:2
    tmux send-keys -t $SESSION:2.0 'CDC' C-m
    tmux send-keys -t $SESSION:2.1 'CDC' C-m

    tmux attach-session -t $SESSION:0
}


# %% -------- [git] ----------:

alias G="git"
alias GS="git status --untracked-files=all"
alias GI="git init"
alias GR="git restore"
alias GD="git diff"
alias GA="git add"
alias GC="git commit"
alias GCM="git commit -m"
alias GCH="git checkout"
alias GM="git merge"
alias GF="git fetch"
alias GL="git log --graph --decorate --oneline"
alias GFO="git fetch origin"
alias GB="git branch --sort=-committerdate"
alias GPUSH="git push -u origin HEAD"
alias GPULL='git pull origin $(git rev-parse --abbrev-ref HEAD)'
function GDIFF() {
    if [ -z "$1" ]; then
        git diff --unified=150 | diff2html --input stdin -s side
    else
        git diff --unified=150 "$1" | diff2html --input stdin -s side
    fi
}
function GSQUASH() {
    if [[ $# -ne 2 ]]; then
        echo "Usage: GSQUASH <commit_hash> <commit_message>"
        return 1
    fi
    local commit_hash="$1"
    local commit_message="$2"
    if ! git rev-parse --verify "$commit_hash" >/dev/null 2>&1; then
        echo "Error: Invalid commit hash"
        return 1
    fi
    git reset --soft "$commit_hash" && git commit -m "$commit_message"
}
GSTASH() {
    local msg="${*:-"WIP stash"}"
    git stash push -u -m "$msg"
}

# %% -------- [docker] ----------:

DOCK(){
    sudo docker run -it -v $HOME/doc/config:/home/ubuntu/doc/config $@ main
}
DOCKCWD(){
    sudo docker run -it -v $(pwd):$(pwd) -v $HOME/doc/config:/home/ubuntu/doc/config -w $(pwd) $@ main
}
alias D="docker"
alias DB="docker build"
alias DR="docker run"
alias DC="docker container"
alias DCE="docker container exec"
alias DI="docker image"


# %% -------- [others] ----------:

MKT() {
    local base_dir=~/trash
    local name=${1:-$(LC_ALL=C tr -dc a-z < /dev/urandom | head -c 8)}
    local dir
    if [[ -n "$1" ]]; then
        dir="$base_dir/${name}_$(date +%F)"
    else
        dir="$base_dir/$name"
    fi
    mkdir -p "$dir" && cd "$dir"
}
MK() {
    local name=${1:-$(LC_ALL=C tr -dc a-z < /dev/urandom | head -c 8)}
    local dir
    if [[ -n "$1" ]]; then
        dir="${name}_$(date +%F)"
    else
        dir="$name"
    fi
    mkdir -p "$dir" && cd "$dir"
}
alias S="sudo"
alias FP='readlink -f'
alias RS="source ~/.zshrc && cd ."
alias VM="virt-manager"
alias PO="systemctl poweroff"
# xdg open (open file from terminal with default app)
alias X="xdg-open"
alias DISCORD="snap run discord"
alias FF="firefox"
alias CHROME="google-chrome-stable --ozone-platform=wayland"
alias PMU="sudo pacman -Syu"
GRIM(){
    if [ "$#" -eq 1 ]; then
        grim -g "$(slurp)" ~/Downloads/screenshot-"$1"-"$(date +'%Y-%m-%dT%H:%M:%S').png"
    else
        grim -g "$(slurp)" ~/Downloads/screenshot"$(date +'%Y-%m-%dT%H:%M:%S').png"
    fi
}
alias H="history 0"

# %% ---------- [syntax highlighting] ----------:

# should be last.
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh 2>/dev/null
